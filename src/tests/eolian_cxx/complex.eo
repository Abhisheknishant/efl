class Complex extends Efl.Object
{
   data: Complex_Data;
   methods {
      // container test
      inptrcont @beta {
         params {
           l: list<string>;
         }
      }
      inclasscont @beta {
         params {
           l: list<Efl.Object>;
         }
      }
      incontcont @beta {
         params {
           l: list<list<string>>;
         }
      }
      incontcontown @beta {
         params {
           l: list<list<string>> @move;
         }
      }
      incontowncontown @beta {
         params {
           l: list<list<string> @move> @move;
         }
      }
      incontowncont @beta {
         params {
           l: list<list<string> @move>;
         }
      }
      instringcont @beta {
         params {
           l: list<string>;
         }
      }
      instringowncont @beta {
         params {
           l: list<mstring @move>;
         }
      }
      instringcontown @beta {
         params {
           l: list<string> @move;
         }
      }
      inarray {
         params {
           l: array<string>;
         }
      }
      inarrayown {
         params {
           l: array<string> @move;
         }
      }
      inhash @beta {
         params {
           l: hash<string, string>;
         }
      }
      inhashown @beta {
         params {
           l: hash<string, string> @move;
         }
      }
      initerator {
         params {
           l: iterator<int>;
         }
      }
      initeratorown {
         params {
           l: iterator<int> @move;
         }
      }
      inaccessor {
         params {
           l: accessor<int>;
         }
      }
      inaccessorown {
         params {
           l: accessor<int> @move;
         }
      }
      // out
      outclasscont @beta {
         params {
           @out l: list<Efl.Object>;
         }
      }
      outcontcont @beta {
         params {
           @out l: list<list<string>>;
         }
      }
      outcontcontown @beta {
         params {
           @out l: list<list<string>> @move;
         }
      }
      outcontowncontown @beta {
         params {
           @out l: list<list<string> @move> @move;
         }
      }
      outcontowncont @beta {
         params {
           @out l: list<list<string> @move>;
         }
      }
      outstringcont @beta {
         params {
           @out l: list<string>;
         }
      }
      outstringowncont @beta {
         params {
           @out l: list<mstring @move>;
         }
      }
      outstringcontown @beta {
         params {
           @out l: list<string> @move;
         }
      }
      outarray {
         params {
           @out l: array<string>;
         }
      }
      outarrayown {
         params {
           @out l: array<string> @move;
         }
      }
      outhash @beta {
         params {
           @out l: hash<string, string>;
         }
      }
      outhashown @beta {
         params {
           @out l: hash<string, string> @move;
         }
      }
      outiterator {
         params {
           @out l: iterator<int>;
         }
      }
      outiteratorown {
         params {
           @out l: iterator<int> @move;
         }
      }
      outaccessor {
         params {
           @out l: accessor<int>;
         }
      }
      outaccessorown {
         params {
           @out l: accessor<int> @move;
         }
      }
      foo @beta {
         params {
            l: list<string>;
         }
      }
      bar {
         return: array<string>;
      }
      wrapper_r {
         return: Complex;
      }
      wrapper_in {
         params {
            @in a1: Complex;
         }
      }
      wrapper_inout {
         params {
            @inout a1: Complex;
         }
      }
      wrapper_out {
         params {
            @out a1: Complex;
         }
      }
   }
}

