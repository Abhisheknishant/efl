struct @beta Efl2.Text.Change_Info {
   [[This structure includes all the information about content changes.

     It's meant to be used to implement undo/redo.
   ]]
   content: string; [[The content added/removed]]
   position: size; [[The position where it was added/removed]]
   length: size; [[The length of content in characters (not bytes, actual unicode characters)]]
   insert: bool; [[$true if the content was inserted, $false if removed]]
   merge: bool; [[$true if can be merged with the previous one. Used for example with insertion when something is already selected]]
}

/* FIXME
       - Filters/validators/etc
      - There would be a "changed" and a "pre-changed" events so you can filter / validate the text using those probably
        - Needs a better name
      - Maybe validation should be in efl.ui.text because it's really just a visual thing that doesn't edit the text
*/
class @beta Efl2.Text.Raw_Editable extends Efl2.Canvas.Text implements Efl2.Input.Text {
   methods {
      @property editable {
         [[Whether the entry is editable.

           By default text interactives are editable. However setting this
           property to $false will make it so that key input will be disregarded.
         ]]
         set {
         }
         get {
         }
         values {
            editable: bool; [[If $true, user input will be inserted in the entry,
            if not, the entry is read-only and no user input is allowed.]]
         }
      }

      @property password_mode {
         [[Whether text is a password]]
         get {}
         set {}
         values {
            enabled: bool; [[$true if the text is a password, $false otherwise]]
         }
      }

      @property replacement_char {
         [[The character used to replace characters that can't be displayed

           Currently only used to replace characters if @.password_mode
           is enabled.
         ]]
         values {
            repch: string; [[Replacement character]]
         }
      }

      @property main_cursor {
         [[The user visible cursor
         ]]
         get {}
         values {
            cursor: Efl2.Text.Cursor; [[The user visible cursor]]
         }
      }

      @property selection_allowed {
         [[Whether or not selection is allowed on this object]]
         set {}
         get {}
         values {
            allowed: bool; [[$true if enabled, $false otherwise]]
         }
      }

      @property selection_cursors {
         [[The cursors used for selection handling.

           If the cursors are equal there's
           no selection.

           You are allowed to retain and modify them. Modifying them modifies
           the selection of the object.
         ]]
         get {}
         values {
            start: const(Efl2.Text.Cursor); [[The start of the selection]]
            end: const(Efl2.Text.Cursor); [[The end of the selection]]
         }
      }

      text_filter {
         [[Replaces the string on the change info with the new filtered string

           Works for both inserts, and deletions (e.g. have text you don't want to be deleted).
           If $new_text is $null, the operation is cancelled.
         ]]
         params {
            change_info: Efl2.Text.Change_Info @by_ref; [[The change info from the callback]]
            new_text: string; [[The new text to use]]
         }
      }

      validation_failed {
         [[Marks the text as invalid (haven't passed validation)

           Meant to be called from inside the changed,user callback
         ]]
         params {
            reason: string; [[Optional reason why it was deemed invalid]]
         }
      }
   }
   events {
      // FIXME: All of these signals will be under this namespace, which is wrong. I guess as part of the composite object changes this will have to change.

      changed,user: Efl2.Text.Change_Info; [[The text object has changed due to user interaction]]

      redo,request: void; [[Called when redo is requested]]
      undo,request: void; [[Called when undo is requested]]

      // FIXME: should be removed and the one on cursor interactive used instead.
      cursor,changed,manual: void; [[Called on manual cursor change]]
      // FIXME: Need to improve the docs, not sure what this one actually means and if it should be exposed. Though it's imf related.
      preedit,changed: void; [[Called when entry preedit changed]]

      selection,start: void; [[Called at selection start]]
      selection,changed: void; [[Called when selection is changed]]
      selection,cleared: void; [[Called when selection is cleared]]
   }
}
