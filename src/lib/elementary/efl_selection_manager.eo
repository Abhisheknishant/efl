class Efl.Selection.Manager (Efl.Object, Efl.Selection, Efl.Dnd) {
   methods {
      selection_set {
         params {
            @in owner: Efl.Object; [[Seleciton owner]]
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in format: Efl.Selection.Format; [[Selection Format]]
            @in buf: const(void_ptr);
            @in len: int; [[The buffer's length.]]
            //@in seat: Efl.Input.Device @optional;[[Specified seat for multiple seats case.]]
            @in seat: uint @optional;[[Specified seat for multiple seats case.]]
         }
      }
      selection_get {
         params {
            @in request: Efl.Object; [[Seleciton owner]]
            @in type: Efl.Selection.Type; [[Selection Type]]
            @in format: Efl.Selection.Format; [[Selection Format]]
            @in data_func: Efl.Selection.Data_Ready; [[Data ready function pointer]]
            //@in seat: Efl.Input.Device @optional;[[Specified seat for multiple seats case.]]
            @in seat: uint @optional;[[Specified seat for multiple seats case.]]
         }
      }
      selection_clear {
         params {
            @in owner: Efl.Object; [[Seleciton owner]]
            @in type: Efl.Selection.Type; [[Selection Type]]
            //@in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case.]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      /*selection_loss_feedback { //name!!!: xxx_set
         params {
            @in owner: Efl.Object; [[Seleciton owner]]
            @in type: Efl.Selection.Type; [[Selection type]]
         }
         return: future<generic_value>; [[Future of selection that is ready]]
      }*/
      drag_start {
         [[This starts a drag and drop process at the drag side.
           During dragging, there are three events emitted as belows:
              - EFL_DND_EVENT_DRAG_POS
              - EFL_DND_EVENT_DRAG_ACCEPT
              - EFL_DND_EVENT_DRAG_DONE
         ]]
         params {
            @in drag_obj: Efl.Object; [[The drag object]]
            @in format: Efl.Selection.Format; [[The data format]]
            @in buf: const(void_ptr);
            @in len: int; [[The data's length.]]
            @in action: Efl.Selection.Action; [[Action when data is transferred]]
            @in icon_func: Efl.Dnd.Drag_Icon_Create; [[Function pointer to create icon]]
            //@in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case.]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      drag_action_set {
         [[This sets the action for the drag]]
         params {
            @in action: Efl.Selection.Action; [[Drag action]]
            //@in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case.]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      drag_cancel {
         [[This cancels the on-going drag]]
         params {
            @in drag_obj: Efl.Object; [[The drag object]]
            //@in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case.]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      drag_item_container_add {
         [[This registers a drag for items in a container. Many items can be
           dragged at a time. During dragging, there are three events emitted:
           EFL_DND_EVENT_DRAG_POS, EFL_DND_EVENT_DRAG_ACCEPT, EFL_DND_EVENT_DRAG_DONE.]]
         params {
            @in cont: Efl.Object; [[Container object]]
            //@in format: Efl.Selection.Format; [[The data format]]
            //@in buf: const(void_ptr); [[Drag data]]
            //@in len: int; [[Drag data's length]]
            @in time_to_drag: double; [[Time since mouse down happens to drag starts]]
            @in anim_duration: double; [[animation duration]]
            @in data_func: Efl.Dnd.Drag_Data_Get; [[Data and its format]]
            @in item_func: Efl.Dnd.Item_Get; [[Item to determine drag start]]
            @in icon_func: Efl.Dnd.Drag_Icon_Create; [[Icon used during drag]]
            @in icon_list_func: Efl.Dnd.Drag_Icon_List_Create; [[Icons used for animations]]
            //@in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case]]
            @in seat: uint @optional; [[Specified seat for multiple seats case]]
         }
      }
      drag_item_container_del {
         [[Remove drag function of items in the container object.]]
         params {
            @in cont: Efl.Object; [[Container object]]
            //@in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case]]
            @in seat: uint @optional; [[Specified seat for multiple seats case]]
         }
      }
      drop_target_add {
         [[There are four events emitted: EFL_DND_DROP_DRAG_ENTER, EFL_DND_DROP_DRAG_LEAVE,
           EFL_DND_DROP_DRAG_POS, EFL_DND_DROP_DRAG_DROP.]]
         params {
            @in target_obj: Efl.Object; [[The drop target]]
            @in format: Efl.Selection.Format; [[Accepted data format]]
            //@in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case.]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
         return: bool; [[$true on success, $false otherwise]]
      }
      drop_target_del {
         params {
            @in target_obj: Efl.Object; [[The drop target]]
            @in format: Efl.Selection.Format; [[Accepted data format]]
            //@in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case.]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      drop_item_container_add {
         params {
            @in cont: Efl.Object; [[Container object]]
            @in format: Efl.Selection.Format; [[Accepted data formats]]
            @in item_func: Efl.Dnd.Item_Get; [[Get item at specific position]]
            //@in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case.]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
      drop_item_container_del {
         params {
            @in cont: Efl.Object; [[Container object]]
            //@in seat: Efl.Input.Device @optional; [[Specified seat for multiple seats case.]]
            @in seat: uint @optional; [[Specified seat for multiple seats case.]]
         }
      }
   }
   implements {
      Efl.Object.constructor;
      Efl.Object.destructor;
      //Efl.Selection.selection_set;
      //Efl.Selection.selection_get;
      //Efl.Selection.selection_clear;
      //Efl.Selection.selection_loss_feedback;
   }
   events {
   }
}
