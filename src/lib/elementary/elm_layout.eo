import edje_types;

class Elm.Layout (Elm.Widget, Efl.Part, Efl.Container, Efl.File,
                  Efl.Ui.View, Efl.Ui.Model.Connect, Efl.Ui.Model.Factory.Connect,
                  Efl.Canvas.Layout_Calc, Efl.Canvas.Layout_Signal,
                  Efl.Canvas.Layout_Group)
{
   [[Elementary layout class]]
   legacy_prefix: elm_layout;
   eo_prefix: elm_obj_layout;
   event_prefix: elm_layout;
   data: Elm_Layout_Smart_Data;
   methods {
      @property theme {
         [[The theme of this widget, defines which edje group will be used.

           Based on the type of widget ($klass), a given $group and a
           $style (usually "default"), the edje group name will be formed
           for this object.
         ]]
         set {
            [[Sets the edje group from the elementary theme that will be used
              as layout.

              Note that $style will be the new style of this object, as in an
              @Elm.Widget.style.

              If this returns $false the widget is very likely to become
              non-functioning.
            ]]
            return: bool; [[$true on success, $false otherwise]]
         }
         values {
            klass: string; [[The class of the group, eg. "button".]]
            group: string("base"); [[The group, eg. "base".]]
            style: string("default"); [[The style to used, eg "default".]]
         }
      }
   }
   implements {
      class.constructor;
      Efl.Object.constructor;
      Efl.File.file { get; set; }
      Efl.File.mmap { get; set; }
      Efl.Canvas.Group.group_calculate;
      Efl.Canvas.Layout_Calc.calc_freeze;
      Efl.Canvas.Layout_Calc.calc_thaw;
      Efl.Canvas.Layout_Signal.signal_callback_add;
      Efl.Canvas.Layout_Signal.signal_callback_del;
      Efl.Canvas.Layout_Signal.signal_emit;
      //Efl.Canvas.Layout_Signal.message_send;
      //Efl.Canvas.Layout_Signal.signal_process;
      Efl.Canvas.Layout_Group.group_data { get; }
      Efl.Canvas.Layout_Group.group_size_min { get; }
      Efl.Canvas.Layout_Group.group_size_max { get; }
      Elm.Widget.focus_direction;
      Elm.Widget.sub_object_add;
      Elm.Widget.theme_apply;
      Elm.Widget.focus_direction_manager_is;
      Elm.Widget.focus_next_manager_is;
      Elm.Widget.focus_next;
      Elm.Widget.disable;
      Elm.Widget.sub_object_del;
      Elm.Widget.on_focus;
      Efl.Container.content_count;
      Efl.Container.content_remove;
      Efl.Container.content_iterate;
      Efl.Container.content { get; set; }
      Efl.Container.content_unset;
      Efl.Part.part;
      Efl.Ui.View.model { get; set; }
      Efl.Ui.Model.Connect.connect;
      Efl.Ui.Model.Factory.Connect.connect;
   }
   events {
      theme,changed; [[Called when theme changed]]
   }
}
