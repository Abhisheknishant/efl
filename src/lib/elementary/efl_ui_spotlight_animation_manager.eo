class @beta Efl.Ui.Spotlight.Animation_Manager extends Efl.Ui.Spotlight.Manager
{
   [[A spotlight manager that uses animation objects to react to different @Efl.Ui.Spotlight.Manager.switch_to situations.

     Animations are played forward when they are on the $to argument, they are played backward when they are on the $from argument.

     Pop animations are always played backwards, Push animations are always played forward.
     Reason for this is, the reusability. You should be able to pass in 1 animation to all sitatuations, which should cover the turn arround effect that "moving in" and "moving out" has. This means, when you have a alpha channel animation, the pop animation can be the same as the jump-in and out animation, and both will look like fading out.


   ]]
   c_prefix: efl_ui_spotlight_manager_animation;
   methods {
      @property forward_animation {
         [[Set the animation objects you want to play on going forward. (going from lower index page to higher index page)
         ]]
         values {
            in : Efl.Canvas.Animation; [[The animation to play, the implementation will take an additional reference]]
            out : Efl.Canvas.Animation; [[The animation to play, the implementation will take an additional reference. Can be the same as $in.]]
         }
         set {

         }
      }
      @property backward_animation {
         [[Set the animation objects you want to play on going backward. (going from higher index page to lower index page)
         ]]
         values {
            in : Efl.Canvas.Animation; [[The animation to play, the implementation will take an additional reference]]
            out : Efl.Canvas.Animation; [[The animation to play, the implementation will take an additional reference. Can be the same as $in.]]
         }
         set {

         }
      }
   }
   constructors {
      .forward_animation;
      .backward_animation;
   }
   implements {
      Efl.Ui.Spotlight.Manager.bind;
      Efl.Ui.Spotlight.Manager.content_add;
      Efl.Ui.Spotlight.Manager.content_del;
      Efl.Ui.Spotlight.Manager.switch_to;
      Efl.Ui.Spotlight.Manager.size {set;}
      Efl.Ui.Spotlight.Manager.animated_transition {set; get;}
      Efl.Object.finalize;
      Efl.Object.invalidate;
   }
}
