interface @beta Efl.Player
{
   [[Efl media player interface]]
   c_prefix: efl_player;
   methods {
        start {
           [[Start a playing playable object.]]
        }
        stop {
           [[Stop playable object.]]
        }
        @property play {
           [[Playback state of the media file.

             This property sets the currently playback state of the
             video. Using this function to play or pause the video
             doesn't alter it's current position.
           ]]
           set {
           }
           get {
           }
           values {
                play: bool; [[$true if playing, $false otherwise.]]
           }
        }
        @property playback_position {
           [[Position in the media file.

             This property sets the current position of the media file
             to $sec seconds since the beginning of the media file.
             This only works on seekable streams. Setting the
             position doesn't change the playing state of the media file.
           ]]
           set {
           }
           get {
           }
           values {
                sec: double; [[The position (in seconds).]]
           }
        }
        @property progress {
           [[How much of the file has been played.

             This function gets the progress in playing the file, the
             return value is in the [0, 1] range.
           ]]
           get {
           }
           values {
                progress: double; [[The progress within the [0, 1] range.]]
           }
        }
        @property play_speed {
             [[Control the play speed of the media file.

               This function control the speed with which the media file will
               be played. 1.0 represents the normal speed, 2 double speed, 0.5
               half speed and so on.
             ]]
             set {
             }
             get {
             }
             values {
                  speed: double; [[The play speed in the [0, infinity) range.]]
             }
        }
   }
}
