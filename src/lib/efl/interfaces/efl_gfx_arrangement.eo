interface @beta Efl.Gfx.Arrangement
{
   [[
     This interface provides methods for manipulating how contents are arranged within a container,
     providing more granularity for content positioning.

     @since 1.23
   ]]
   methods
   {
      @property content_align {
         [[This property determines how contents will be aligned within a container if there is
           unused space.

           It is different than the @Efl.Gfx.Hint.hint_align property in that it affects the position
           of all the contents within the container. For example, if a box widget has extra space
           on the horizontal axis, this property can be used to align the box's contents to the
           left or the right side.

           See also @Efl.Gfx.Hint.hint_align.
         ]]
         set {}
         get {}
         values {
            align_horiz: double; [[Double, ranging from 0.0 to 1.0, where 0.0 is at the start of the horizontal axis
                                   and 1.0 is at the end. The default value is 0.5.]]
            align_vert:  double; [[Double, ranging from 0.0 to 1.0, where 0.0 is at the start of the vertical axis
                                   and 1.0 is at the end. The default value is 0.5.]]
         }
      }
      @property content_padding {
         [[This property determines the space between a container's content items.

           It is different than the @Efl.Gfx.Hint.hint_margin property in that it is applied to each
           content item within the container instead of a single item. The calculation for these two properties
           is cumulative.

           See also @Efl.Gfx.Hint.hint_margin.
         ]]
         set {}
         get {}
         values {
            pad_horiz: double; [[Horizontal padding. The default value is 0.0.]]
            pad_vert:  double; [[Vertical padding. The default value is 0.0.]]
            scalable:  bool; [[$true if scalable, $false otherwise. The default value is $false.]]
         }
      }
   }
}
