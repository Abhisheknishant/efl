import efl_gfx_types;

interface Efl.Pack_Grid (Efl.Pack_Linear)
{
   [[2D containers aligned on a grid with rows and columns]]
   legacy_prefix: null;
   eo_prefix: efl_pack;
   methods {
      pack_grid {
         params {
            subobj: Efl.Pack_Item *;
            col: int;
            row: int;
            colspan: int @optional; [[0 means 1, -1 means @.columns]]
            rowspan: int @optional; [[0 means 1, -1 means @.rows]]
         }
      }
      pack_children_at {
         [[grids can have overlapping children - returns a list because
           we expect only few items per cell
         ]]
         return: free(own(list<Efl.Pack_Item *> *), eina_list_free);
         params {
            @in col: int;
            @in row: int;
         }
      }
      pack_child_at {
         [[returns the top child at position. see also @.pack_children_at]]
         return: Efl.Pack_Item*;
         params {
            @in col: int;
            @in row: int;
         }
      }
      @property pack_child_position {
         [[position and span of the $subobj in this container, may be modified to move the $subobj]]
         set { [[same as grid_pack]] }
         get {}
         keys {
            subobj: Efl.Pack_Item*;
         }
         values {
            col: int;
            row: int;
            colspan: int;
            rowspan: int;
         }
      }
      /* FIXME: the below SET apis need to be well defined. they are not. yet */
      @property grid_size {
         [[combines @.columns and @.rows]]
         set {}
         get {}
         values {
            cols: int;
            rows: int;
         }
      }
      @property columns {
         set { [[specifies limit for linear adds - if direction is horizontal]] }
         get {}
         values {
            cols: int;
         }
      }
      @property rows {
         set { [[specifies limit for linear adds - if direction is vertical]] }
         get {}
         values {
            rows: int;
         }
      }
      @property directions {
         [[primary and secondary up/left/right/down orientation for linear apis. default is right and down
           overrides @Efl.Pack_Linear.direction
         ]]
         set {}
         get {}
         values {
            primary: Efl.Orient;
            secondary: Efl.Orient;
         }
      }
   }
}
