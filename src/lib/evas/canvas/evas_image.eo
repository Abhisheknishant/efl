type @extern Evas_Object_Image_Pixels_Get_Cb: __undefined_type; /* FIXME: func pointers are not supported. */

class Evas.Image (Evas.Object, Efl.File, Efl.Image, Efl.Image_Load, Efl.Image_Animated, Efl.Gfx.Buffer, Efl.Gfx.Fill, Efl.Gfx.View, Evas.Filter)
{
   legacy_prefix: evas_object_image;
   eo_prefix: evas_obj_image;
   methods {
      /* weird stuff - hints */
      @property content_hint {
         set {
            [[Set the content hint setting of a given image object of the
              canvas.

              This function sets the content hint value of the given image
              of the canvas. For example, if you're on the GL engine and
              your driver implementation supports it, setting this hint to
              #EVAS_IMAGE_CONTENT_HINT_DYNAMIC will make it need zero copies
              at texture upload time, which is an "expensive" operation.
            ]]
         }
         get {
            [[Get the content hint setting of a given image object of the
              canvas.

              This returns #EVAS_IMAGE_CONTENT_HINT_NONE on error.
            ]]
         }
         values {
            hint: Evas.Image_Content_Hint; [[The content hint value, one of
                                             the @Evas.Image_Content_Hint ones.]]
         }
      }
      @property scale_hint {
         set {
            [[Set the scale hint of a given image of the canvas.

              This function sets the scale hint value of the given image
              object in the canvas, which will affect how Evas is to cache
              scaled versions of its original source image.
            ]]
         }
         get {
            [[Get the scale hint of a given image of the canvas.

              This function returns the scale hint value of the given image
              object of the canvas.
            ]]
         }
         values {
            hint: Evas.Image_Scale_Hint; [[The scale hint, a value in
                                           @Evas.Image_Scale_Hint.]]
         }
      }

      /* GL View */
      @property pixels_dirty {
         set {
            [[Mark whether the given image object is dirty and needs to
              request its pixels.

              This function will only properly work if a pixels get
              callback has been set.

              Warning: Use this function if you really know what you are
              doing.
            ]]
         }
         get {
            [[Retrieves whether the given image object is dirty (needs to
              be redrawn).
            ]]
         }
         values {
            dirty: bool; [[Whether the image is dirty.]]
         }
      }
      @property pixels_get_callback {
         set {
            [[Set the callback function to get pixels from a canvas' image.

              This functions sets a function to be the callback function
              that get pixels from a image of the canvas.
            ]]
         }
         values {
            func: Evas_Object_Image_Pixels_Get_Cb @nonull; [[The callback function.]]
            data: void *; [[The data pointer to be passed to $func.]]
         }
      }

      /* native surface */
      @property native_surface {
         set {
            [[Set the native surface of a given image of the canvas

              This function sets a native surface of a given canvas image.
            ]]
            legacy: null;
         }
         get {
            [[Get the native surface of a given image of the canvas

              This function returns the native surface of a given canvas
              image.
            ]]
         }
         values {
            surf: Evas.Native_Surface* @nonull; [[The native surface.]]
         }
      }
   }
   implements {
      Eo.Base.constructor;
      Eo.Base.destructor;
      Eo.Base.dbg_info_get;
      Eo.Base.finalize;
      Efl.File.file.set;
      Efl.File.file.get;
      Efl.File.mmap.set;
      Efl.File.mmap.get;
      Efl.File.save;
      Efl.Image.orientation.get;
      Efl.Image.orientation.set;
      Efl.Image.alpha.get;
      Efl.Image.alpha.set;
      Efl.Image.smooth_scale.set;
      Efl.Image.smooth_scale.get;
      Efl.Image.ratio.get;
      Efl.Image.border.get;
      Efl.Image.border.set;
      Efl.Image.border_scale.get;
      Efl.Image.border_scale.set;
      Efl.Image.border_center_fill.get;
      Efl.Image.border_center_fill.set;
      Efl.Image_Animated.animated.get;
      Efl.Image_Animated.animated_frame.get;
      Efl.Image_Animated.animated_frame.set;
      Efl.Image_Animated.animated_frame_count.get;
      Efl.Image_Animated.animated_loop_type.get;
      Efl.Image_Animated.animated_loop_count.get;
      Efl.Image_Animated.animated_frame_duration.get;
      Efl.Image_Load.load_error.get;
      Efl.Image_Load.load_async_start;
      Efl.Image_Load.load_async_cancel;
      Efl.Image_Load.load_dpi.get;
      Efl.Image_Load.load_dpi.set;
      Efl.Image_Load.load_size.set;
      Efl.Image_Load.load_size.get;
      Efl.Image_Load.load_orientation.get;
      Efl.Image_Load.load_orientation.set;
      Efl.Image_Load.load_scale_down.get;
      Efl.Image_Load.load_scale_down.set;
      Efl.Image_Load.load_region.get;
      Efl.Image_Load.load_region.set;
      Efl.Image_Load.load_region_support.get;
      Efl.Gfx.Buffer.buffer_update_add;
      Efl.Gfx.Buffer.stride.get;
      Efl.Gfx.Buffer.colorspace.get;
      Efl.Gfx.Buffer.buffer_get;
      Efl.Gfx.Buffer.buffer_set;
      Efl.Gfx.Buffer.buffer_copy_set;
      Efl.Gfx.Fill.fill.set;
      Efl.Gfx.Fill.fill.get;
      Efl.Gfx.Fill.filled.get;
      Efl.Gfx.Fill.filled.set;
      Efl.Gfx.Filter.filter_program.set;
      Efl.Gfx.View.view_size.get;
      Evas.Filter.filter_input_alpha;
      Evas.Filter.filter_input_render;
      Evas.Filter.filter_dirty;
   }
}
