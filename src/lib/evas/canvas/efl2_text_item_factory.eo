/* FIXME:
   * Add mising functions (probably an interface) to set size, src and other needed item properties.
    * Note that "src" is potentially not applicable here but only in an inherited class - as this object is quite dumb
        * Probably "name" and "src" though so at least theer's a generic interface
  - Deletion is just like a normal char deletion
  - In the text it's the unicode object replacement char
  - Do we even want refcount?
*/

enum @beta Efl2.Text.Item.Vfill
{
   [[The item size options]]
   full, [[Fill the whole line]]
   ascent, [[Fill from the baseline to the top of the line]]
}

enum @beta Efl2.Text.Item.Sizing
{
   [[Sizing modes for the item

     Refer to $Efl.Text.Item.Factory.size for how each is used.]]
   normal, [[Normal size]]
   absolute, [[Absolute size]]
   relative, [[Relative size]]
}

class @beta Efl2.Text.Item.Factory extends Efl2.Text.Attribute.Factory {
   [[Item factory API

       Long-lived you keep it and reuse it as needed
   ]]

   methods {
      @property vfill {
         [[How the item vertically fills the line
         ]]
         set { }
         get { }
         values {
            vfill: Efl2.Text.Item.Vfill; [[How the item vertically fills the object]]
         }
      }

      @property size {
         [[The size to use.

           Behaves differently based on the mode.
           normal: uses the size passed multiplied by the object's scaling factory.
           absolute: uses the size passed as is
           relative: uses the aspect ratio passed and just fills up the line.

         ]]
         set { }
         get { }
         values {
            size: Eina.Size2D; [[The size (depending on the moed)]]
            mode: Efl2.Text.Item.Sizing;
         }
      }
   }
}
