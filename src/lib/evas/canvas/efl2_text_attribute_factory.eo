struct @beta Efl2.Text.Attribute.Handle;

class @beta Efl2.Text.Attribute.Factory extends Efl.Object {
   [[Annotation factory API

       Long-lived you keep it and reuse it as needed
   ]]
   methods {
      @property tag {
         [[The the type of the attribute

           This is sort of equivalent to the markup tag you would use for it.
           Default is NULL, which means it'll select the correct tag automatically,
           though you could override it if you'd like to set a special tag/style
           that's defined in the theme.
           E.g. your theme may define <danger> which you can then use here.
         ]]
         set { }
         get { }
         values {
            name: string; [[The name of the tag.]]
         }
      }

      @property properties {
         [[The properties of the format as a string

           This property lets you manipulate the properties of the factory as a string.
           This is similar to how you would set it when using markup.
           For example, in order to set the markup <span font_weight=bold font_size=12>,
           you would just set the tag using $.tag and then use this to set the
           "font_weight=bold font_size=12" part.
         ]]
         set { }
         get { }
         values {
            properties: string; [[The properties as a string]]
         }
      }

      @property ephemeral {
         [[Whether this attribute is ephemeral or not

           Ephemeral attributes are ones that are just used to change how the text
           looks but are not actually part of the content. For example, an ephemeral
           attribute would be used to annotate a spelling mistake, and a non-ephemeral
           for bold text in a rich text editor.
         ]]
         set { }
         get { }
         values {
            ephemeral: bool; [[Whether it is or not]]
         }
      }

      reset {
         [[Resets the factory context
         ]]
      }

      load {
         [[Sets the factory context from a handle
         ]]
         params {
            handle: const(Efl2.Text.Attribute.Handle) @by_ref; [[Attribute handle]]
         }
      }

      // FIXME: rename?
      update {
         [[Sets the factory context to an handle
         ]]
         params {
            handle: Efl2.Text.Attribute.Handle @by_ref; [[Attribute handle]]
         }
      }

      insert {
         [[Creates an attribute from the current factory context and inserts it into the range marked by the cursors
         ]]
         return: Efl2.Text.Attribute.Handle @by_ref; [[The handle of the attribute]]
         params {
            cur1: const(Efl2.Text.Cursor); [[Start of range]]
            cur2: const(Efl2.Text.Cursor); [[End of range]]
         }
      }

      range_attributes_get @static {
         [[Returns an iterator of all the handles in a range.
         ]]
         params {
              @in start: const(Efl2.Text.Cursor); [[Start of range]]
              @in end: const(Efl2.Text.Cursor); [[End of range]]
         }
         return: iterator<Efl2.Text.Attribute.Handle> @move; [[The handles of the attributes]]
      }

      attribute_cursors_get @static {
         [[Gets the attribute's range and set the cursors
         ]]
         params {
              @in handle: const(Efl2.Text.Attribute.Handle) @by_ref; [[The handle of the attribute]]
              @in start: Efl2.Text.Cursor; [[Start of range]]
              @in end: Efl2.Text.Cursor; [[End of range]]
         }
      }

      ref @static {
         [[Increase the attribute's refcount
         ]]
         params {
              handle: Efl2.Text.Attribute.Handle @by_ref; [[Handle of the attribute to delete from the object]]
         }
         return: Efl2.Text.Attribute.Handle @by_ref; [[The handle passed (also returned for convenience]]
      }

      unref @static {
         [[Decrease the attribute's refcount
         ]]
         params {
              handle: Efl2.Text.Attribute.Handle @by_ref; [[Handle of the attribute to delete from the object]]
         }
      }

      remove @static {
         [[Removes the attribute from the text object
         ]]
         params {
              handle: Efl2.Text.Attribute.Handle @by_ref; [[Handle of the attribute to delete from the object]]
         }
      }
   }
   implements {
       Efl.Object.constructor;
       Efl.Object.destructor;
   }
}
