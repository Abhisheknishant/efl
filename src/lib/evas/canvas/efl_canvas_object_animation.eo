mixin @beta Efl.Canvas.Object_Animation requires Efl.Object
{
  methods {
    @property animation {
      [[The animation that is currently played on the canvas object.

        $null in case that there is no animation running.]]
      get {

      }
      values {
        animation : Efl.Canvas.Animation; [[The animation which is currently applied on this object.]]
      }
    }
    @property animation_progress {
      [[The current progress of the animation, between 0.0 and 1.0.

        Even if the animation is going backwards (speed < 0.0). the progress will still go from 0.0 to 1.0.

        If there is no animation going on, this will return -1.0.
      ]]
      get {

      }
      values {
        position : double; [[The position the animation applying is currently in.]]
      }
    }
    @property animation_pause {
      [[Pause the animation

        The animation will not be unset. When $pause is unset, the animation will be resumed at the same progress it has right now.
      ]]
      values {
        pause : bool;
      }
    }
    animation_start {
      [[Start a animation new animation.

        If there is a animation going on, this is stopped.
      ]]
      params {
        animation : Efl.Canvas.Animation @move; [[The animation to start.]]
        speed : double; [[The speed of the animation, this is counted as a ratio to the animation length. A speed < 0.0 means that the animation will be played bacwards.]]
        start_pos : double; [[The position to start, must be between 0.0 and 1.0.]]
      }
    }
    animation_stop {
      [[Stop the animation.

        After this call, @.animation will return $null. The reference that was taken during @.animation_start will be given up on.
      ]]
    }
  }
  events {
      animation,changed: Efl.Canvas.Animation; [[The animation object got changed.]]
      animation_progress,updated : double; [[The animation position got changed.]]
  }
}
