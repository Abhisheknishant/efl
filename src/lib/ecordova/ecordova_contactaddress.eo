class Ecordova.ContactAddress (Eo.Base) {
    [[Contains information about a single contact.]]
    legacy_prefix: null;
    methods {
        constructor {
            [[Custom Ecordova_ContactAddress constructor.
              @.constructor

              @since 2.3
            ]]
            params {
                pref: bool;
                [[user's preferred value.]]

                type: const(char)*;
                [[A string indicating what type of field this is, home for
                  example.
                ]]

                formatted: const(char)*;
                [[The full address formatted for display.]]

                street_address: const(char)*;
                [[The full street address.]]

                locality: const(char)*;
                [[The city or locality.]]

                region: const(char)*;
                [[The state or region.]]

                postal_code: const(char)*;
                [[The zip code or postal code.]]

                country: const(char)*;
                [[The country name.]]
            }
        }
        @property id {
            get {}
            values {
                id: int;
            }
        }
        @property pref {
            values {
                preferred: bool;
            }
        }
        @property type {
            values {
                type: const(char)*;
            }
        }
        @property formatted {
            values {
                formatted: const(char)*;
            }
        }
        @property street_address {
            values {
                street_address: const(char)*;
            }
        }
        @property locality {
            values {
                locality: const(char)*;
            }
        }
        @property region {
            values {
                region: const(char)*;
            }
        }
        @property postal_code {
            values {
                postal_code: const(char)*;
            }
        }
        @property country {
            values {
                country: const(char)*;
            }
        }
    }
    implements {
        Eo.Base.constructor;
        Eo.Base.destructor;
    }
    constructors {
        .constructor;
    }
}
