struct Ecordova_Metadata {
    modification_date: time;
    size: long;
}

class Ecordova.Entry (Eo.Base) {
    [[Represents a file or directory on the local file system.]]
    legacy_prefix: null;
    methods {
        metadata_get {
            [[Look up the metadata of the entry.]]
        }
        metadata_set {
            [[Set the metadata of the entry.]]
            params {
                metadata: Ecordova_Metadata*; [[keys and values to set]]
            }
        }
        move {
            [[Move a file or directory to a new location.]]
            params {
                parent: Eo*/*Ecordova.DirectoryEntry*/;
                [[the directory to which to move this entry]]

                new_name: const(char)*;
                [[new name of the entry, defaults to the current name]]
            }
        }
        copy {
            [[Copy a directory to a different location.]]
            params {
                parent: Eo*/*Ecordova.DirectoryEntry*/;
                [[the directory to which to copy this entry]]

                new_name: const(char)*;
                [[new name of the entry, defaults to the current name]]
            }
        }
        remove {
            [[Remove a file or directory. It is an error to attempt to delete
              a directory that is not empty. It is an error to attempt to
              delete a root directory of a file system.]]
        }
        parent_get {
            [[Look up the parent DirectoryEntry of this entry.]]
        }
        @property file_is {
            values {
                value: bool;
            }
        }
        @property directory_is {
            get {}
            values {
                value: bool;
            }
        }
        @property name {
            values {
                value: const(char)*;
            }
        }
        @property path {
            values {
                value: const(char)*;
            }
        }
    }
    implements {
        Eo.Base.constructor;
        Eo.Base.destructor;
    }
    events {
        metadata,get: const(Ecordova_Metadata)*;
        error: Ecordova_FileError*;
        move,success: const(Ecordova.Entry)*;
        copy,success: const(Ecordova.Entry)*;
        remove,success;
        parent,get: const(Eo)/*Ecordova.DirectoryEntry*/*;
    }
}
