enum Ecordova.Capture.ErrorCode {
    CAPTURE_INTERNAL_ERR,
    [[The camera or microphone failed to capture image or sound.]]

    CAPTURE_APPLICATION_BUSY,
    [[The camera or audio capture application is currently serving another capture request.]]

    CAPTURE_INVALID_ARGUMENT,
    [[Invalid use of the API (e.g., the value of limit is less than one).]]

    CAPTURE_NO_MEDIA_FILES,
    [[The user exits the camera or audio capture application before capturing anything.]]

    CAPTURE_NOT_SUPPORTED
    [[The requested capture operation is not supported.]]

}

struct Ecordova.Capture.Error {
    code: Ecordova.Capture.ErrorCode; [[One of the pre-defined error codes]]
}

struct Ecordova.Capture.AudioOptions {
    [[Encapsulates audio capture configuration options.]]

    limit: int;
    [[The maximum number of audio clips the device user can record in a single
      capture operation. The value must be greater than or equal to 1 (defaults to 1).]]

    duration: int;
    [[The maximum duration of an audio sound clip, in seconds.]]
}

struct Ecordova.Capture.ImageOptions {
    [[Encapsulates image capture configuration options.]]

    limit: int;
    [[The maximum number of images the user can capture in a single capture
      operation. The value must be greater than or equal to 1 (defaults to 1).]]
}

struct Ecordova.Capture.VideoOptions {
    [[Encapsulates video capture configuration options.]]

    limit: int;
    [[The maximum number of video clips the device's user can capture in a
      single capture operation. The value must be greater than or equal to 1 (defaults to 1).]]

    duration: int;
    [[The maximum duration of a video clip, in seconds.]]
}

class Ecordova.Capture (Eo.Base) {
    [[Ecordova Media-Capture Plugin
      Plugin ID: org.apache.cordova.media-capture
      http://plugins.cordova.io/#/package/org.apache.cordova.media-capture
    ]]
    legacy_prefix: null;
    methods {
        constructor {
            [[Custom Ecordova_Capture constructor.
              @.constructor

              @since 2.3
            ]]
        }
        audio_capture {
            [[Start the audio recorder application and return information
              about captured audio clip files.

              Starts an asynchronous operation to capture audio recordings
              using the device's default audio recording application. The
              operation allows the device user to capture multiple recordings
              in a single session.

              The capture operation ends when either the user exits the audio
              recording application, or the maximum number of recordings
              specified by CaptureAudioOptions.limit is reached. If no limit
              parameter value is specified, it defaults to one (1), and the
              capture operation terminates after the user records a single
              audio clip.

              When the capture operation finishes, the CaptureCallback
              executes with an array of MediaFile objects describing each
              captured audio clip file. If the user terminates the operation
              before an audio clip is captured, the CaptureErrorCallback
              executes with a CaptureError object, featuring the
              CaptureError.CAPTURE_NO_MEDIA_FILES error code.
            ]]
            params {
                options: const(Ecordova.Capture.AudioOptions)*;
            }
        }
        image_capture {
            [[Start the camera application and return information about
              captured image files.

              Starts an asynchronous operation to capture images using the
              device's camera application. The operation allows users to
              capture more than one image in a single session.

              The capture operation ends either when the user closes the
              camera application, or the maximum number of recordings
              specified by CaptureAudioOptions.limit is reached. If no limit
              value is specified, it defaults to one (1), and the capture
              operation terminates after the user captures a single image.

              When the capture operation finishes, it invokes the CaptureCB
              callback with an array of MediaFile objects describing each
              captured image file. If the user terminates the operation before
              capturing an image, the CaptureErrorCB callback executes with a
              CaptureError object featuring a
              CaptureError.CAPTURE_NO_MEDIA_FILES error code.
            ]]
            params {
                options: const(Ecordova.Capture.ImageOptions)*;
            }
        }
        video_capture {
            [[Start the video recorder application and return information
              about captured video clip files.

              Starts an asynchronous operation to capture video recordings
              using the device's video recording application. The operation
              allows the user to capture more than one recordings in a single
              session.

              The capture operation ends when either the user exits the video
              recording application, or the maximum number of recordings
              specified by CaptureVideoOptions.limit is reached. If no limit
              parameter value is specified, it defaults to one (1), and the
              capture operation terminates after the user records a single
              video clip.

              When the capture operation finishes, it the CaptureCB callback
              executes with an array of MediaFile objects describing each
              captured video clip file. If the user terminates the operation
              before capturing a video clip, the CaptureErrorCB callback
              executes with a CaptureError object featuring a
              CaptureError.CAPTURE_NO_MEDIA_FILES error code.
            ]]
            params {
                options: const(Ecordova.Capture.VideoOptions)*;
            }
        }
    }
    implements {
        Eo.Base.constructor;
        Eo.Base.destructor;
    }
    constructors {
        .constructor;
    }
    events {
        success: const(array<MediaFile*>)*;
        [[Invoked upon a successful media capture operation.

          This function executes after a successful capture operation
          completes. At this point a media file has been captured, and either
          the user has exited the media capture application, or the capture
          limit has been reached.

          Each MediaFile object describes a captured media file.
        ]]

        error: const(Ecordova.Capture.Error)*;
        [[Invoked if an error occurs during a media capture operation.

          This function executes if an error occurs when trying to launch a
          media capture operation. Failure scenarios include when the capture
          application is busy, a capture operation is already taking place, or
          the user cancels the operation before any media files are captured.

          This function executes with a CaptureError object containing an
          appropriate error code.
        ]]
    }
}
