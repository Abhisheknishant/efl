enum @beta Efl.Canvas.Layout_Part_Text_Expand
{
   [[Text layout policy to enforce. If none is set, only min/max descriptions
     are taken into account.
   ]]
   none = 0,        [[No policy. Use default description parameters.]]
   min_x = 1,       [[Text is tied to the left side of the container.]]
   min_y = 1 << 1,  [[Text is tied to the top side of the container.]]
   max_x = 1 << 2,  [[Text is tied to the right side of the container.]]
   max_y = 1 << 3,  [[Text is tied to the bottom side of the container.]]
}

class @beta Efl.Canvas.Layout_Part_Text extends Efl.Canvas.Layout_Part implements Efl.Text,
Efl.Text_Markup, Efl.Text_Format, Efl.Text_Font, Efl.Text_Style
{
   [[Represents a TEXT part of a layout

     Its lifetime is limited to one function call only, unless an extra
     reference is explicitly held.
   ]]
   methods {
        @property text_expand {
           [[Sizing policy for text parts.

            This will determine whether to consider height or width
            constraints, if text-specific behaviors occur (such as ellipsis,
            line-wrapping etc.
           ]]
           values {
              type: Efl.Canvas.Layout_Part_Text_Expand; [[Desired sizing policy.]]
           }
        }

   }
   data: null;
   implements {
      Efl.Text.text { set; get; }
      Efl.Text_Markup.markup { get; set; }
      Efl.Text_Format.ellipsis { set; get; }
      Efl.Text_Format.wrap { set; get; }
      Efl.Text_Font.font_family { set; get; }
      Efl.Text_Font.font_size { set; get; }
      Efl.Text_Style.normal_color { set; get; }
      Efl.Text_Style.backing_type { set; get; }
      Efl.Text_Style.backing_color { set; get;}
      Efl.Text_Style.underline_type { set; }
      Efl.Text_Style.underline_color { set; get; }
      Efl.Text_Style.underline2_color { set; get; }
      Efl.Text_Style.underline_dashed_color { set; get; }
      Efl.Text_Style.underline_height { set; }
      Efl.Text_Style.underline_dashed_width { set; }
      Efl.Text_Style.underline_dashed_gap { set; }
      Efl.Text_Style.strikethrough_type { set; }
      Efl.Text_Style.strikethrough_color { set; get; }
      Efl.Text_Style.effect_type { set; }
      Efl.Text_Style.shadow_direction { set; }
      Efl.Text_Style.outline_color { set; get; }
      Efl.Text_Style.shadow_color { set; get; }
      Efl.Text_Style.glow_color { set; get; }
      Efl.Text_Style.glow2_color { set; get; }
   }
}
