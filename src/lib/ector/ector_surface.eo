mixin Ector.Surface (Ector.Buffer)
{
   [[Surface interface for Ector]]

   eo_prefix: ector_surface;
   data: null;
   methods {
      @property reference_point {
         [[This defines where (0,0) is in pixel coordinates inside the surface]]
         set @pure_virtual {
         }
         values {
            x: int; [[X coordinate for reference point]]
            y: int; [[Y coordinate for reference point]]
         }
      }
      renderer_factory_new @pure_virtual {
         [[Create a new renderer factory for the given type]]
         return: Efl.Object; [[Renderer factory object]] /* FIXME: Should be a more restricted type, only here for cyclic. */
         params {
            @in type: const(Efl.Class) @nonull; [[Efl class]] /* FIXME: Should probably be a more restricted type */
         }
      }
      clip_push @pure_virtual{
         [[Push a clip object to the surface context
           All the ector drawing will be affected by this clip until pop_clip is called]]
         params {
            @in clip: const(Ector.Renderer); [[the clip object]]
         }
      }
      clip_pop @pure_virtual{
         [[Pop a clip object from the surface context]]
         params {
            @in clip: const(Ector.Renderer); [[the clip object]]
         }
      }
   }
}
